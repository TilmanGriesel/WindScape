esphome:
  name: desk-fan

esp32:
  board: esp32dev

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

logger:

output:
  - platform: ledc
    pin: GPIO14
    id: pwm_out
    frequency: 21000Hz  # must be within fan spec

fan:
  - platform: speed
    name: "Desk Fan"
    output: pwm_out
    id: desk_fan
    speed_count: 100
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:fan"
    on_speed_set:
      then:
        - logger.log:
            format: "Fan speed set to %d%%"
            args: [ 'x' ]
        - if:
            condition:
              switch.is_on: breeze_mode
            then:
              - switch.turn_off: breeze_mode  # cancel breeze if manual change

sensor:
  - platform: pulse_counter
    pin: 
      number: GPIO27
      mode:
        input: true
        pullup: true
    name: "Desk Fan RPM"
    update_interval: 1s
    unit_of_measurement: "RPM"
    icon: "mdi:speedometer"
    filters:
      - multiply: 0.5
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1

number:
  - platform: template
    name: "Breeze Min Speed"
    id: breeze_min_speed
    optimistic: true
    min_value: 10
    max_value: 50
    initial_value: 20
    step: 1
    unit_of_measurement: "%"
    mode: box
    restore_value: true
    icon: "mdi:speedometer-slow"
    
  - platform: template
    name: "Breeze Max Speed"
    id: breeze_max_speed
    optimistic: true
    min_value: 30
    max_value: 80
    initial_value: 60
    step: 1
    unit_of_measurement: "%"
    mode: box
    restore_value: true
    icon: "mdi:speedometer-medium"
    
  - platform: template
    name: "Gust Max Speed"
    id: gust_max_speed
    optimistic: true
    min_value: 40
    max_value: 100
    initial_value: 80
    step: 1
    unit_of_measurement: "%"
    mode: box
    restore_value: true
    icon: "mdi:weather-tornado"
    
  - platform: template
    name: "Wave Cycle Duration"
    id: wave_cycle_duration
    optimistic: true
    min_value: 5
    max_value: 60
    initial_value: 5
    step: 1
    unit_of_measurement: "s"
    mode: box
    restore_value: true
    icon: "mdi:timer-outline"
    
  - platform: template
    name: "Update Interval"
    id: update_interval
    optimistic: true
    min_value: 200
    max_value: 2000
    initial_value: 800
    step: 100
    unit_of_measurement: "ms"
    mode: box
    restore_value: true
    icon: "mdi:clock-fast"
    
  - platform: template
    name: "Gust Probability"
    id: gust_probability
    optimistic: true
    min_value: 0
    max_value: 20
    initial_value: 8
    step: 1
    unit_of_measurement: "%"
    mode: box
    restore_value: true
    icon: "mdi:dice-multiple"
    
  - platform: template
    name: "Lull Probability"
    id: lull_probability
    optimistic: true
    min_value: 0
    max_value: 15
    initial_value: 5
    step: 1
    unit_of_measurement: "%"
    mode: box
    restore_value: true
    icon: "mdi:pause-circle-outline"
    
  - platform: template
    name: "Lull Speed"
    id: lull_speed
    optimistic: true
    min_value: 5
    max_value: 40
    initial_value: 20
    step: 1
    unit_of_measurement: "%"
    mode: box
    restore_value: true
    icon: "mdi:speedometer-slow"

switch:
  - platform: template
    name: "Seaside Breeze Mode"
    id: breeze_mode
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:weather-windy"
    on_turn_on:
      - script.execute: simulate_breeze
    on_turn_off:
      - script.stop: simulate_breeze
      - output.set_level:
          id: pwm_out
          level: 0.0  # turn off completely when disabled

script:
  - id: simulate_breeze
    mode: restart
    then:
      - while:
          condition:
            switch.is_on: breeze_mode
          then:
            - lambda: |-
                // config parameters
                float min_speed = id(breeze_min_speed).state / 100.0f;
                float max_speed = id(breeze_max_speed).state / 100.0f;
                float gust_max = id(gust_max_speed).state / 100.0f;
                float cycle_duration = id(wave_cycle_duration).state * 1000.0f;
                int gust_chance = (int)id(gust_probability).state;
                int lull_chance = (int)id(lull_probability).state;
                float lull_speed_val = id(lull_speed).state / 100.0f;
                
                static float current_speed = min_speed;
                
                // wave pattern
                float time_factor = millis() / cycle_duration;
                float speed_range = max_speed - min_speed;
                float base_wave = min_speed + (speed_range * 0.5f) + (speed_range * 0.5f * sin(time_factor));
                
                // random variation
                float random_factor = (esp_random() % 200 - 100) / 1000.0f; // Â±10%
                float target_speed = base_wave + random_factor;
                
                // occasional gust
                if (esp_random() % 100 < gust_chance) {
                  float gust_boost = (gust_max - max_speed) * ((esp_random() % 100) / 100.0f);
                  target_speed = max_speed + gust_boost;
                  ESP_LOGI("breeze", "Gentle gust: %.1f%%", target_speed * 100);
                } else {
                  ESP_LOGI("breeze", "Seaside breeze: %.1f%%", target_speed * 100);
                }
                
                // clamp
                if (target_speed < min_speed) target_speed = min_speed;
                if (target_speed > gust_max) target_speed = gust_max;
                
                // smooth transition
                float speed_diff = target_speed - current_speed;
                current_speed += speed_diff * 0.3f;
                
                id(pwm_out).set_level(current_speed);
            
            # update interval
            - delay: !lambda |-
                return (int)id(update_interval).state;
            
            # occasional lull
            - if:
                condition:
                  lambda: |-
                    int lull_chance = (int)id(lull_probability).state;
                    return (esp_random() % 100 < lull_chance);
                then:
                  - lambda: |-
                      float lull_speed_val = id(lull_speed).state / 100.0f;
                      ESP_LOGI("breeze", "Peaceful lull: %.1f%%", lull_speed_val * 100);
                      id(pwm_out).set_level(lull_speed_val);
                  - delay: !lambda |-
                      return (2000 + (esp_random() % 3000)); // 2-5 second lull
