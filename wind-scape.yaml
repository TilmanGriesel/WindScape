substitutions:
  device_name: "wind-scape"
  friendly_name: "WindScape"
  
  # PWM Configuration
  pwm_frequency: "25000Hz"
  pwm_min_power: "0"
  
  # Fan operational limits
  fan_speed_min: "0"
  fan_speed_max: "100"
  fan_speed_default: "80"
  
  # Base timing intervals
  sensor_update_interval: "1s"
  
  # External sensor configuration
  external_kmh_sensor_entity: "sensor.my_speed_in_kmh"  # Change this to your HA entity
  external_max_kmh: "160"  # KMH that maps to 100% fan speed
  external_min_kmh: "0"    # KMH that maps to 10% fan speed
  external_sensor_update_interval: "200ms"
  external_sensor_timeout: "60s"  # Timeout before reverting mode

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  comment: "Transforming ordinary PC fans into natural wind simulation desk fans. https://github.com/TilmanGriesel/WindScape"

esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${friendly_name} Fallback"
    password: !secret ap_password

api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

logger:
  level: DEBUG
  logs:
    wind: DEBUG

# ====================================================================================
# HARDWARE CONFIGURATION
# ====================================================================================

output:
  - platform: ledc
    pin: GPIO14
    id: fan_pwm_output
    frequency: ${pwm_frequency}
    min_power: ${pwm_min_power}

  # Virtual oscillation output
  - platform: template
    id: oscillation_output
    type: binary
    write_action:
      - lambda: |-
          // This output doesn't control hardware, just tracks state
          // The actual oscillation logic is handled in on_oscillating_set

fan:
  - platform: speed
    name: "Fan Control"
    id: desk_fan
    output: fan_pwm_output
    oscillation_output: oscillation_output
    speed_count: 100
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:fan"
    preset_modes:
      - "Countryside (Low)"     # Steady Low when oscillating=OFF, Countryside when oscillating=ON
      - "Mediterranean (Medium)" # Steady Medium when oscillating=OFF, Mediterranean when oscillating=ON 
      - "Ocean (High)"          # Steady High when oscillating=OFF, Ocean when oscillating=ON
      - "Mountain (Breeze)"     # Steady Breeze when oscillating=OFF, Mountain when oscillating=ON
      - "Plains (Max)"          # Steady Max when oscillating=OFF, Plains when oscillating=ON
      - "Fjord"                 # Special wind mode (only available when oscillating=ON)
      - "External"              # External sensor mode
    on_turn_on:
      - logger.log: "Fan Control turned ON - enabling fan power"
      - lambda: |-
          id(fan_power_enabled) = true;
    on_turn_off:
      - logger.log: "Fan Control turned OFF - disabling fan power"
      - lambda: |-
          id(fan_power_enabled) = false;
          id(fan_pwm_output).turn_off();
          // Stop all simulations when fan is turned off
          id(wind_simulation_loop).stop();
          id(gust_check_loop).stop();
          id(external_sensor_loop).stop();
          id(external_sensor_timeout_loop).stop();
          id(wind_simulation_active) = false;
    on_speed_set:
      - logger.log:
          format: "Manual fan speed set to: %.0f%%"
          args: ['x']
      - script.execute:
          id: apply_fan_speed
          speed_percent: !lambda "return x;"
    on_oscillating_set:
      - logger.log:
          format: "Oscillating mode changed to: %s"
          args: ['x ? "Wind Simulation" : "Steady Mode"']
      - script.execute:
          id: handle_mode_change
          oscillating: !lambda "return x;"
    on_preset_set:
      - logger.log:
          format: "Fan preset changed to: %s"
          args: ['x.c_str()']
      - script.execute:
          id: handle_preset_change
          preset_name: !lambda "return x;"

# ====================================================================================
# SENSORS & MONITORING
# ====================================================================================

sensor:
  # External Home Assistant sensor
  - platform: homeassistant
    name: "External Speed km/h"
    id: external_kmh_input
    entity_id: ${external_kmh_sensor_entity}
    unit_of_measurement: "km/h"
    icon: "mdi:weather-windy"
    accuracy_decimals: 1
    filters:
      - lambda: |-
          if (isnan(x) || x < 0) return 0.0;
          return x;
    on_value:
      - lambda: |-
          // Update last received time
          id(last_external_sensor_update) = millis() / 1000.0f;
      - if:
          condition:
            lambda: 'return id(current_preset_mode) != "External";'
          then:
            - logger.log: "Auto-switching to External preset due to sensor data"
            - lambda: |-
                // Store current preset as previous before switching
                if (id(current_preset_mode) != "External") {
                  id(previous_preset_mode) = id(current_preset_mode);
                }
                id(current_preset_mode) = "External";
            - lambda: |-
                auto call = id(desk_fan).make_call();
                call.set_preset_mode("External");
                call.perform();

  # Fan RPM monitoring
  - platform: pulse_counter
    pin:
      number: GPIO27
      mode:
        input: true
        pullup: true
    name: "Fan RPM"
    id: fan_rpm
    update_interval: 2s
    unit_of_measurement: "RPM"
    icon: "mdi:speedometer"
    accuracy_decimals: 0
    filters:
      - multiply: 0.5

  # Current wind speed
  - platform: template
    name: "Wind Speed"
    id: wind_speed_sensor
    unit_of_measurement: "m/s"
    icon: "mdi:weather-windy"
    accuracy_decimals: 1
    state_class: "measurement"
    update_interval: ${sensor_update_interval}

  # Current gust status
  - platform: template
    name: "Gust Active"
    id: gust_active_sensor
    unit_of_measurement: "%"
    icon: "mdi:weather-windy-variant"
    accuracy_decimals: 0
    state_class: "measurement"
    update_interval: ${sensor_update_interval}

  # System diagnostics
  - platform: uptime
    name: "${friendly_name} Uptime"
    update_interval: 60s

  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 60s

  - platform: internal_temperature
    name: "${friendly_name} CPU Temperature"
    update_interval: 30s

  - platform: template
    name: "${friendly_name} Free Heap"
    unit_of_measurement: "bytes"
    icon: "mdi:memory"
    accuracy_decimals: 0
    state_class: "measurement"
    update_interval: 30s
    lambda: |-
      return ESP.getFreeHeap();

# ====================================================================================
# USER CONTROLS
# ====================================================================================

number:
  # Global wind intensity multiplier
  - platform: template
    name: "Wind Intensity"
    id: wind_intensity
    min_value: 30
    max_value: 150
    step: 5
    initial_value: 100
    unit_of_measurement: "%"
    restore_value: true
    icon: "mdi:weather-windy-variant"
    mode: slider
    optimistic: true

  # How often gusts occur (affects probability)
  - platform: template
    name: "Gust Frequency"
    id: gust_frequency
    min_value: 10
    max_value: 90
    step: 5
    initial_value: 30
    unit_of_measurement: "%"
    restore_value: true
    icon: "mdi:sine-wave"
    mode: slider
    optimistic: true

  # Minimum wind variation to prevent stagnation
  - platform: template
    name: "Wind Variability"
    id: wind_variability
    min_value: 0
    max_value: 100
    step: 5
    initial_value: 40
    unit_of_measurement: "%"
    restore_value: true
    icon: "mdi:wave"
    mode: slider
    optimistic: true

  # Minimum fan speed
  - platform: template
    name: "Minimum Fan Speed"
    id: minimum_fan_speed
    min_value: ${fan_speed_min}
    max_value: 50
    step: 5
    initial_value: 0
    unit_of_measurement: "%"
    restore_value: true
    icon: "mdi:speedometer-slow"
    mode: slider
    optimistic: true

  # Maximum fan speed
  - platform: template
    name: "Maximum Fan Speed"
    id: fan_speed_limit
    min_value: 40
    max_value: ${fan_speed_max}
    step: 5
    initial_value: ${fan_speed_default}
    unit_of_measurement: "%"
    restore_value: true
    icon: "mdi:speedometer"
    mode: slider
    optimistic: true

# System status
binary_sensor:
  - platform: status
    name: "${friendly_name} Status"

  - platform: template
    name: "${friendly_name} Wind Simulation Active"
    id: simulation_active_sensor
    icon: "mdi:weather-windy"
    lambda: |-
      return id(wind_simulation_active);

# ====================================================================================
# GLOBAL STATE VARIABLES
# ====================================================================================

globals:
  # Global power control
  - id: fan_power_enabled
    type: bool
    restore_value: true
    initial_value: 'true'

  # External sensor timeout tracking
  - id: last_external_sensor_update
    type: float
    restore_value: false
    initial_value: '0.0'
  
  - id: current_preset_mode
    type: std::string
    restore_value: true
    initial_value: '"Countryside (Low)"'
  
  - id: previous_preset_mode
    type: std::string
    restore_value: true
    initial_value: '"Countryside (Low)"'

  # Track oscillating state
  - id: is_oscillating
    type: bool
    restore_value: true
    initial_value: 'false'

  # Simulation control
  - id: wind_simulation_active
    type: bool
    restore_value: false
    initial_value: 'false'
  
  # Current wind state
  - id: current_wind_speed
    type: float
    restore_value: false
    initial_value: '3.6'
    
  - id: target_wind_speed
    type: float
    restore_value: false
    initial_value: '3.6'
    
  - id: wind_change_rate
    type: float
    restore_value: false
    initial_value: '0.1'
    
  # Gust state
  - id: gust_active
    type: bool
    restore_value: false
    initial_value: 'false'
    
  - id: gust_start_time
    type: float
    restore_value: false
    initial_value: '0.0'
    
  - id: gust_duration
    type: float
    restore_value: false
    initial_value: '3.0'
    
  - id: gust_intensity
    type: float
    restore_value: false
    initial_value: '1.0'
    
  - id: last_gust_check
    type: float
    restore_value: false
    initial_value: '0.0'
    
  # Wind behavior parameters (set by location and phase)
  - id: base_wind_min
    type: float
    restore_value: false
    initial_value: '2.2'

  - id: base_wind_max
    type: float
    restore_value: false
    initial_value: '6.7'

  - id: gust_probability_base
    type: float
    restore_value: false
    initial_value: '0.02'
    
  - id: location_gust_strength
    type: float
    restore_value: false
    initial_value: '1.8'
    
  # Weather phase system
  - id: current_weather_phase
    type: int
    restore_value: false
    initial_value: '1'  # 0=quiet, 1=medium, 2=high
    
  - id: phase_start_time
    type: float
    restore_value: false
    initial_value: '0.0'
    
  - id: phase_duration
    type: float
    restore_value: false
    initial_value: '60.0'
    
  - id: phase_wind_min
    type: float
    restore_value: false
    initial_value: '5.0'
    
  - id: phase_wind_max
    type: float
    restore_value: false
    initial_value: '15.0'

# ====================================================================================
# RANDOMIZED WIND SIMULATION ENGINE
# ====================================================================================

script:
  # Apply fan speed with safety limits and power check
  - id: apply_fan_speed
    parameters:
      speed_percent: float
    then:
      - if:
          condition:
            lambda: 'return !id(fan_power_enabled);'
          then:
            - lambda: |-
                id(fan_pwm_output).turn_off();
                ESP_LOGD("wind", "Fan power disabled - ignoring speed command");
          else:
            - lambda: |-
                float requested_speed = speed_percent / 100.0f;
                float speed_limit = id(fan_speed_limit).state / 100.0f;
                float min_speed = id(minimum_fan_speed).state / 100.0f;
                float intensity_multiplier = id(wind_intensity).state / 100.0f;
                
                // Apply global intensity modifier during simulation
                if (id(wind_simulation_active)) {
                  requested_speed *= intensity_multiplier;
                }
                
                // Enforce speed limits
                requested_speed = fmax(min_speed, fmin(speed_limit, requested_speed));
                
                if (requested_speed <= 0.01f) {
                  id(fan_pwm_output).turn_off();
                } else {
                  id(fan_pwm_output).set_level(requested_speed);
                }

  # Handle oscillating mode changes (Steady vs Wind)
  - id: handle_mode_change
    parameters:
      oscillating: bool
    then:
      - lambda: |-
          id(is_oscillating) = oscillating;
          ESP_LOGI("wind", "Mode changed to: %s", oscillating ? "Wind Simulation" : "Steady Mode");
          
          // Stop current activities
          id(wind_simulation_loop).stop();
          id(gust_check_loop).stop();
          id(wind_simulation_active) = false;
          
          // Reset gust state
          id(gust_active) = false;
          id(gust_intensity) = 1.0f;
          id(gust_active_sensor).publish_state(0);
          
      - delay: 300ms
      - script.execute:
          id: apply_current_preset
          force_apply: true

  # Handle preset mode changes
  - id: handle_preset_change
    parameters:
      preset_name: std::string
    then:
      - lambda: |-
          std::string preset = preset_name;
          ESP_LOGI("wind", "Preset changed to: %s", preset.c_str());
          
          // Update current preset tracking
          id(current_preset_mode) = preset;
          
          // Stop all current activities
          id(wind_simulation_loop).stop();
          id(gust_check_loop).stop();
          id(external_sensor_loop).stop();
          id(external_sensor_timeout_loop).stop();
          id(wind_simulation_active) = false;
          
          // Reset gust state
          id(gust_active) = false;
          id(gust_intensity) = 1.0f;
          id(gust_active_sensor).publish_state(0);
          
      - delay: 300ms
      - script.execute:
          id: apply_current_preset
          force_apply: true

  # Apply current preset based on oscillating state
  - id: apply_current_preset
    parameters:
      force_apply: bool
    then:
      - lambda: |-
          std::string preset = id(current_preset_mode);
          bool is_wind_mode = id(is_oscillating);
          
          ESP_LOGI("wind", "Applying preset '%s' in %s mode", 
                   preset.c_str(), is_wind_mode ? "Wind" : "Steady");
          
          // Handle External sensor preset (mode-independent)
          if (preset == "External") {
            id(external_sensor_loop).execute();
            id(external_sensor_timeout_loop).execute();
            ESP_LOGI("wind", "External Sensor preset activated with timeout monitoring");
            return;
          }
          
          // Handle other presets based on oscillating state
          if (!is_wind_mode) {
            // Steady mode - fixed speeds
            if (preset == "Countryside (Low)") {
              id(apply_fan_speed).execute(25.0f);
            } else if (preset == "Mediterranean (Medium)") {
              id(apply_fan_speed).execute(50.0f);
            } else if (preset == "Ocean (High)") {
              id(apply_fan_speed).execute(75.0f);
            } else if (preset == "Mountain (Breeze)") {
              id(apply_fan_speed).execute(35.0f);
            } else if (preset == "Plains (Max)") {
              id(apply_fan_speed).execute(100.0f);
            } else if (preset == "Fjord") {
              // Fjord only available in wind mode, default to medium in steady
              id(apply_fan_speed).execute(50.0f);
            }
          } else {
            // Wind simulation mode - different environments
            if (preset == "Countryside (Low)") {
              // Countryside (French Fields): 2-8 mph, rare subtle gusts
              id(base_wind_min) = 2.0f;
              id(base_wind_max) = 8.0f;
              id(gust_probability_base) = 0.008f;
              id(location_gust_strength) = 1.4f;
              id(start_wind_simulation).execute();
            } else if (preset == "Mediterranean (Medium)") {
              // Mediterranean (Italian Coast): 4-10 mph, gentle infrequent gusts
              id(base_wind_min) = 4.0f;
              id(base_wind_max) = 10.0f;
              id(gust_probability_base) = 0.015f;
              id(location_gust_strength) = 1.6f;
              id(start_wind_simulation).execute();
            } else if (preset == "Ocean (High)") {
              // Ocean (Atlantic Coast): 8-16 mph, frequent rolling gusts
              id(base_wind_min) = 8.0f;
              id(base_wind_max) = 16.0f;
              id(gust_probability_base) = 0.03f;
              id(location_gust_strength) = 2.0f;
              id(start_wind_simulation).execute();
            } else if (preset == "Mountain (Breeze)") {
              // Mountains (Alpine Range): 6-18 mph, sharp frequent gusts
              id(base_wind_min) = 6.0f;
              id(base_wind_max) = 18.0f;
              id(gust_probability_base) = 0.05f;
              id(location_gust_strength) = 2.3f;
              id(start_wind_simulation).execute();
            } else if (preset == "Plains (Max)") {
              // Plains (Patagonian Steppes): 10-22 mph, powerful sustained gusts
              id(base_wind_min) = 10.0f;
              id(base_wind_max) = 22.0f;
              id(gust_probability_base) = 0.08f;
              id(location_gust_strength) = 2.5f;
              id(start_wind_simulation).execute();
            } else if (preset == "Fjord") {
              // Fjord (Norwegian Fjords): 8-20 mph, channeled dramatic gusts
              id(base_wind_min) = 8.0f;
              id(base_wind_max) = 20.0f;
              id(gust_probability_base) = 0.06f;
              id(location_gust_strength) = 2.4f;
              id(start_wind_simulation).execute();
            }
          }

  # Start wind simulation (extracted common logic)
  - id: start_wind_simulation
    then:
      - lambda: |-
          // Initialize wind state with phase-specific ranges
          float mid_range = (id(base_wind_min) + id(base_wind_max)) * 0.5f;
          id(current_wind_speed) = mid_range;
          id(target_wind_speed) = mid_range;
          
          // Initialize phase system
          id(current_weather_phase) = 1; // Start with medium phase
          id(phase_start_time) = millis() / 1000.0f;
          id(phase_duration) = 120.0f; // 2 minutes initial phase
          
          // Set initial phase ranges (medium)
          id(phase_wind_min) = id(base_wind_min) * 0.7f;
          id(phase_wind_max) = id(base_wind_min) + (id(base_wind_max) - id(base_wind_min)) * 0.8f;
          
          // Start simulation
          id(wind_simulation_active) = true;
          id(generate_wind_target).execute();
          id(wind_simulation_loop).execute();
          id(gust_check_loop).execute();
          
          ESP_LOGI("wind", "Started wind simulation: base range %.1f-%.1f mph, starting medium phase", 
                   id(base_wind_min), id(base_wind_max));

  # Check external sensor timeout
  - id: check_external_sensor_timeout
    then:
      - lambda: |-
          if (id(current_preset_mode) != "External") return;
          
          float current_time = millis() / 1000.0f;
          float time_since_update = current_time - id(last_external_sensor_update);
          
          // Check if timeout exceeded (60 seconds)
          if (time_since_update > 60.0f && id(last_external_sensor_update) > 0) {
            ESP_LOGW("wind", "External sensor timeout (%.1fs), reverting to previous preset: %s", 
                     time_since_update, id(previous_preset_mode).c_str());
            
            // Revert to previous preset
            std::string prev_preset = id(previous_preset_mode);
            if (prev_preset.empty() || prev_preset == "External") {
              prev_preset = "Countryside (Low)"; // Fallback to default
            }
            
            auto call = id(desk_fan).make_call();
            call.set_preset_mode(prev_preset);
            call.perform();
          }

  # External sensor input processing
  - id: process_external_sensor_data
    then:
      - lambda: |-
          if (id(current_preset_mode) != "External") return;
          
          float kmh = id(external_kmh_input).state;
          if (isnan(kmh) || kmh < 0) kmh = 0;
          
          // Map KMH to fan percentage: 0 KMH = 10%, max_kmh = 100%
          float max_kmh = ${external_max_kmh};
          float min_percent = 10.0f;
          float max_percent = 100.0f;
          
          float fan_percent;
          if (kmh <= 0) {
            fan_percent = 0; // Turn off fan when no wind
          } else {
            fan_percent = min_percent + ((kmh / max_kmh) * (max_percent - min_percent));
            fan_percent = fmax(min_percent, fmin(max_percent, fan_percent));
          }
          
          ESP_LOGD("wind", "External Sensor: %.1f km/h -> %.1f%% fan", kmh, fan_percent);
          id(apply_fan_speed).execute(fan_percent);

  # Generate new random wind target
  - id: generate_wind_target
    then:
      - lambda: |-
          if (!id(wind_simulation_active)) return;
          
          // Use phase-specific wind range instead of base range
          float range = id(phase_wind_max) - id(phase_wind_min);
          float random_factor = (esp_random() % 1000) / 1000.0f;
          float new_target = id(phase_wind_min) + (random_factor * range);
          
          // Add some bias toward moderate values within the phase range
          float bias_factor = (esp_random() % 1000) / 1000.0f;
          new_target = (new_target + (id(phase_wind_min) + id(phase_wind_max)) * 0.5f * bias_factor) / (1.0f + bias_factor);
          
          id(target_wind_speed) = new_target;
          
          // Set change rate based on current phase
          float variability = id(wind_variability).state / 100.0f;
          float base_rate;
          
          if (id(current_weather_phase) == 0) {      // Quiet phase - slower changes
            base_rate = 0.08f + (variability * 0.12f);
          } else if (id(current_weather_phase) == 2) { // High phase - faster changes  
            base_rate = 0.25f + (variability * 0.35f);
          } else {                                   // Medium phase - normal
            base_rate = 0.15f + (variability * 0.25f);
          }
          
          float rate_variation = (esp_random() % 100) / 100.0f;
          id(wind_change_rate) = base_rate * (0.7f + rate_variation);
          
          ESP_LOGD("wind", "Phase %d target: %.1f mph, rate: %.3f", 
                   id(current_weather_phase), id(target_wind_speed), id(wind_change_rate));

  # Weather phase management
  - id: update_weather_phase
    then:
      - lambda: |-
          if (!id(wind_simulation_active)) return;
          
          float current_time = millis() / 1000.0f;
          
          // Check if current phase should end
          if (current_time - id(phase_start_time) >= id(phase_duration)) {
            int old_phase = id(current_weather_phase);
            float random_val = (esp_random() % 100) / 100.0f;
            
            // Natural phase transitions with realistic probabilities
            if (id(current_weather_phase) == 0) {        // Currently quiet
              if (random_val < 0.6f) {
                id(current_weather_phase) = 1;           // 60% -> medium
              } else {
                id(current_weather_phase) = 2;           // 40% -> high (sudden storms)
              }
            } else if (id(current_weather_phase) == 1) { // Currently medium
              if (random_val < 0.3f) {
                id(current_weather_phase) = 0;           // 30% -> quiet
              } else if (random_val < 0.7f) {
                id(current_weather_phase) = 1;           // 40% -> stay medium
              } else {
                id(current_weather_phase) = 2;           // 30% -> high
              }
            } else {                                     // Currently high
              if (random_val < 0.4f) {
                id(current_weather_phase) = 1;           // 40% -> medium (gradual calming)
              } else if (random_val < 0.7f) {
                id(current_weather_phase) = 0;           // 30% -> quiet (sudden calm)
              } else {
                id(current_weather_phase) = 2;           // 30% -> stay high
              }
            }
            
            // Set phase duration based on new phase
            if (id(current_weather_phase) == 0) {        // Quiet phases
              id(phase_duration) = 90.0f + (esp_random() % 120); // 1.5-3.5 minutes
            } else if (id(current_weather_phase) == 1) { // Medium phases  
              id(phase_duration) = 120.0f + (esp_random() % 180); // 2-5 minutes
            } else {                                     // High activity phases
              id(phase_duration) = 60.0f + (esp_random() % 90);  // 1-2.5 minutes
            }
            
            id(phase_start_time) = current_time;
            
            // Update phase-specific wind ranges
            if (id(current_weather_phase) == 0) {        // Quiet phase
              id(phase_wind_min) = id(base_wind_min) * 0.3f;
              id(phase_wind_max) = id(base_wind_min) + (id(base_wind_max) - id(base_wind_min)) * 0.4f;
            } else if (id(current_weather_phase) == 1) { // Medium phase
              id(phase_wind_min) = id(base_wind_min) * 0.7f;
              id(phase_wind_max) = id(base_wind_min) + (id(base_wind_max) - id(base_wind_min)) * 0.8f;
            } else {                                     // High phase
              id(phase_wind_min) = id(base_wind_min) + (id(base_wind_max) - id(base_wind_min)) * 0.4f;
              id(phase_wind_max) = id(base_wind_max) * 1.2f; // Can exceed base max during storms
            }
            
            // Clamp phase ranges to reasonable limits (0.5-25 mph)
            id(phase_wind_min) = fmax(0.5f, id(phase_wind_min));
            id(phase_wind_max) = fmin(25.0f, id(phase_wind_max));
            
            ESP_LOGI("wind", "Phase change %d->%d: range %.1f-%.1f mph, duration %.0fs", 
                     old_phase, id(current_weather_phase), 
                     id(phase_wind_min), id(phase_wind_max), id(phase_duration));
            
            // Force new wind target for the new phase
            id(generate_wind_target).execute();
          }

  # Main wind simulation with smooth transitions
  - id: calculate_wind_simulation
    then:
      - lambda: |-
          if (!id(wind_simulation_active)) return;
          
          // Update weather phase first
          id(update_weather_phase).execute();
          
          float current_time = millis() / 1000.0f;
          
          // Smoothly move current wind toward target
          float target = id(target_wind_speed);
          float current = id(current_wind_speed);
          float change_rate = id(wind_change_rate);
          
          // Simple linear interpolation toward target
          float difference = target - current;
          float change = difference * change_rate;
          
          // Phase-specific micro-turbulence
          float turb_intensity;
          if (id(current_weather_phase) == 0) {        // Quiet - minimal turbulence
            turb_intensity = 0.2f;
          } else if (id(current_weather_phase) == 2) { // High - strong turbulence
            turb_intensity = 1.2f;
          } else {                                     // Medium - moderate turbulence
            turb_intensity = 0.6f;
          }
          
          float micro_turb = ((esp_random() % 200) - 100) / 100.0f * turb_intensity;
          
          id(current_wind_speed) = current + change + micro_turb;
          
          // Clamp to reasonable bounds (0-25 mph range)
          id(current_wind_speed) = fmax(0.5f, fmin(25.0f, id(current_wind_speed)));
          
          // Phase-specific target change behavior
          float change_threshold = 2.0f;
          float close_change_chance = 40.0f;  // Base chance when close
          float far_change_chance = 10.0f;    // Base chance when far
          
          if (id(current_weather_phase) == 0) {        // Quiet - less frequent changes
            close_change_chance = 25.0f;
            far_change_chance = 5.0f;
            change_threshold = 1.5f;
          } else if (id(current_weather_phase) == 2) { // High - more frequent changes
            close_change_chance = 60.0f;
            far_change_chance = 20.0f;
            change_threshold = 3.0f;
          }
          
          if (abs(difference) < change_threshold) {
            if ((esp_random() % 100) < close_change_chance) {
              id(generate_wind_target).execute();
            }
          } else {
            if ((esp_random() % 100) < far_change_chance) {
              id(generate_wind_target).execute();
            }
          }
          
          // Apply gust multiplier if active
          float final_wind = id(current_wind_speed);
          if (id(gust_active)) {
            final_wind *= id(gust_intensity);
          }
          
          id(wind_speed_sensor).publish_state(final_wind);
          
          // Convert wind speed (mph) to fan percentage
          // Wind range: 0-25 mph maps to 10-90% fan speed
          float fan_percent = 10.0f + ((final_wind / 25.0f) * 80.0f);
          fan_percent = fmax(10.0f, fmin(90.0f, fan_percent));
          
          id(apply_fan_speed).execute(fan_percent);

  # Randomized gust system
  - id: check_for_gusts
    then:
      - lambda: |-
          if (!id(wind_simulation_active)) return;
          
          float current_time = millis() / 1000.0f;
          
          // If gust is active, check if it should end
          if (id(gust_active)) {
            float gust_age = current_time - id(gust_start_time);
            
            if (gust_age >= id(gust_duration)) {
              // End gust
              id(gust_active) = false;
              id(gust_intensity) = 1.0f;
              id(gust_active_sensor).publish_state(0);
              ESP_LOGI("wind", "Gust ended after %.1f seconds", gust_age);
            } else {
              // Update gust intensity with smooth curves
              float progress = gust_age / id(gust_duration);
              float envelope;
              
              if (progress < 0.3f) {
                // Quick build-up (0-30% of duration)
                envelope = progress / 0.3f;
                envelope = 1.0f - pow(1.0f - envelope, 2.0f); // Ease-out curve
              } else if (progress < 0.7f) {
                // Sustain with slight variation (30-70% of duration)
                envelope = 1.0f;
                // Add some random variation during sustain
                float variation = sin(gust_age * 2.0f) * 0.1f * ((esp_random() % 100) / 100.0f);
                envelope += variation;
              } else {
                // Decay (70-100% of duration)
                float decay_progress = (progress - 0.7f) / 0.3f;
                envelope = 1.0f - (decay_progress * decay_progress);
              }
              
              id(gust_intensity) = 1.0f + (id(location_gust_strength) - 1.0f) * envelope;
              id(gust_active_sensor).publish_state(envelope * 100.0f);
            }
            return;
          }
          
          // Check if enough time has passed since last check
          if (current_time - id(last_gust_check) < 1.5f) return;
          id(last_gust_check) = current_time;
          
          // Phase-specific gust probability
          float base_prob = id(gust_probability_base);
          float user_freq = id(gust_frequency).state / 100.0f;
          float phase_multiplier;
          
          if (id(current_weather_phase) == 0) {        // Quiet phase - fewer but still possible gusts
            phase_multiplier = 0.4f;
          } else if (id(current_weather_phase) == 2) { // High phase - frequent gusts
            phase_multiplier = 2.5f;
          } else {                                     // Medium phase - normal gusts
            phase_multiplier = 1.0f;
          }
          
          float final_prob = base_prob * user_freq * phase_multiplier;
          
          // Random chance for gust
          float random_val = (esp_random() % 10000) / 10000.0f;
          
          if (random_val < final_prob) {
            // Start new gust with phase-appropriate characteristics
            id(gust_active) = true;
            id(gust_start_time) = current_time;
            
            // Phase-specific gust duration and intensity
            float duration_base, intensity_base;
            
            if (id(current_weather_phase) == 0) {        // Quiet phase
              duration_base = 2.0f + ((esp_random() % 100) / 100.0f) * 4.0f; // 2-6s
              intensity_base = 1.1f + ((esp_random() % 100) / 100.0f) * 0.4f; // 1.1-1.5x
            } else if (id(current_weather_phase) == 2) { // High phase
              duration_base = 1.0f + ((esp_random() % 100) / 100.0f) * 3.0f; // 1-4s
              intensity_base = 1.4f + ((esp_random() % 100) / 100.0f) * 1.0f; // 1.4-2.4x
            } else {                                     // Medium phase
              duration_base = 1.5f + ((esp_random() % 100) / 100.0f) * 5.0f; // 1.5-6.5s
              intensity_base = 1.2f + ((esp_random() % 100) / 100.0f) * 0.6f; // 1.2-1.8x
            }
            
            id(gust_duration) = duration_base;
            id(gust_intensity) = fmin(intensity_base, id(location_gust_strength));
            
            std::string phase_names[] = {"quiet", "medium", "high"};
            ESP_LOGI("wind", "Starting %s phase gust: duration=%.1fs, max_intensity=%.2fx", 
                     phase_names[id(current_weather_phase)].c_str(),
                     id(gust_duration), id(gust_intensity));
          }

# ====================================================================================
# SIMULATION CONTROL & PRESET MANAGEMENT
# ====================================================================================

  # Main simulation loop
  - id: wind_simulation_loop
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return id(wind_simulation_active);'
          then:
            - script.execute: calculate_wind_simulation
            - delay: !lambda 'return 200 + (esp_random() % 300);'

  # Gust check loop
  - id: gust_check_loop
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return id(wind_simulation_active);'
          then:
            - script.execute: check_for_gusts
            - delay: !lambda 'return 200 + (esp_random() % 600);' # 200-800ms random

  # External sensor loop
  - id: external_sensor_loop
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return id(current_preset_mode) == "External";'
          then:
            - script.execute: process_external_sensor_data
            - delay: ${external_sensor_update_interval}

  # External sensor timeout monitoring loop
  - id: external_sensor_timeout_loop
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return id(current_preset_mode) == "External";'
          then:
            - script.execute: check_external_sensor_timeout
            - delay: 5s

# ====================================================================================
# USER INTERFACE
# ====================================================================================

button:
  - platform: restart
    name: "${friendly_name} Restart"