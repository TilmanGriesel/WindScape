substitutions:
  device_name: "wind-scape"
  friendly_name: "WindScape"
  
  # PWM Configuration - Optimized for 2000RPM PC fans
  pwm_frequency: "25000Hz"
  pwm_min_power: "0.12"  # Minimum duty cycle to overcome motor startup torque
  
  # Fan operational limits
  fan_speed_min: "15"
  fan_speed_max: "100"
  fan_speed_default: "70"
  
  # Base timing intervals (dynamically adjusted by location presets)
  base_update_interval: "800ms"
  gust_update_interval: "200ms"
  sensor_update_interval: "1s"

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  comment: "PWM fan controller featuring simulated wind effects for more realistic airflow behavior. https://github.com/TilmanGriesel/WindScape"

esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${friendly_name} Fallback"
    password: !secret ap_password

api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

logger:
  level: DEBUG
  logs:
    wind: DEBUG

# ====================================================================================
# HARDWARE CONFIGURATION
# ====================================================================================

output:
  - platform: ledc
    pin: GPIO14
    id: fan_pwm_output
    frequency: ${pwm_frequency}
    min_power: ${pwm_min_power}

fan:
  - platform: speed
    name: "Manual Control"
    id: desk_fan
    output: fan_pwm_output
    speed_count: 100
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:fan"
    on_speed_set:
      - if:
          condition:
            lambda: 'return id(wind_mode_select).state == "Manual";'
          then:
            - script.execute:
                id: apply_fan_speed
                speed_percent: !lambda "return x;"

# ====================================================================================
# SENSORS & MONITORING
# ====================================================================================

sensor:
  # RPM monitoring via pulse counter (hall effect or optical sensor on GPIO27)
  - platform: pulse_counter
    pin:
      number: GPIO27
      mode:
        input: true
        pullup: true
    name: "Fan RPM"
    id: fan_rpm
    update_interval: 2s
    unit_of_measurement: "RPM"
    icon: "mdi:speedometer"
    accuracy_decimals: 0
    filters:
      - multiply: 0.5  # Adjust based on sensor pulses per revolution

  # Simulated wind speed based on physics calculations
  - platform: template
    name: "Wind Speed"
    id: wind_speed_sensor
    unit_of_measurement: "mph"
    icon: "mdi:weather-windy"
    accuracy_decimals: 1
    state_class: "measurement"
    update_interval: ${sensor_update_interval}

  # Current gust intensity as percentage above base wind
  - platform: template
    name: "Gust Strength"
    id: gust_strength_sensor
    unit_of_measurement: "%"
    icon: "mdi:weather-windy-variant"
    accuracy_decimals: 0
    state_class: "measurement"
    update_interval: ${sensor_update_interval}

  # ESP32 system diagnostics
  - platform: uptime
    name: "${friendly_name} Uptime"
    id: uptime_sensor
    update_interval: 60s

  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    id: wifi_signal_sensor
    update_interval: 60s

  - platform: internal_temperature
    name: "${friendly_name} CPU Temperature"
    id: cpu_temp_sensor
    update_interval: 30s

  # Memory usage monitoring
  - platform: template
    name: "${friendly_name} Free Heap"
    id: free_heap_sensor
    unit_of_measurement: "bytes"
    icon: "mdi:memory"
    accuracy_decimals: 0
    state_class: "measurement"
    update_interval: 30s
    lambda: |-
      return ESP.getFreeHeap();

  # Physics engine performance metrics
  - platform: template
    name: "Physics Loop Frequency"
    id: physics_loop_freq
    unit_of_measurement: "Hz"
    icon: "mdi:sine-wave"
    accuracy_decimals: 2
    state_class: "measurement"
    update_interval: 10s
    lambda: |-
      if (id(current_base_interval) > 0) {
        return 1000.0f / id(current_base_interval);
      }
      return 0.0f;

  # Current noise parameters for debugging
  - platform: template
    name: "Noise Time Scale"
    id: noise_scale_sensor
    unit_of_measurement: "scale"
    icon: "mdi:chart-line-variant"
    accuracy_decimals: 4
    state_class: "measurement"
    update_interval: 5s
    lambda: |-
      return id(noise_time_scale);

  - platform: template
    name: "Wind Activity"
    id: wind_activity_sensor
    unit_of_measurement: "%"
    icon: "mdi:chart-line"
    accuracy_decimals: 0
    state_class: "measurement"
    update_interval: ${sensor_update_interval}
    lambda: |-
      if (id(current_activity_mode) == 0) return 30.0f;      // Quiet
      else if (id(current_activity_mode) == 1) return 70.0f; // Normal  
      else return 100.0f;                                    // Active

# ====================================================================================
# USER CONTROLS
# ====================================================================================

number:
  # Global wind intensity multiplier
  - platform: template
    name: "Wind Intensity"
    id: wind_intensity
    min_value: 30
    max_value: 150
    step: 5
    initial_value: 100
    unit_of_measurement: "%"
    restore_value: true
    icon: "mdi:weather-windy-variant"
    mode: slider
    optimistic: true

  # Frequency of gust events
  - platform: template
    name: "Gust Frequency"
    id: gust_frequency
    min_value: 10
    max_value: 90
    step: 5
    initial_value: 40
    unit_of_measurement: "%"
    restore_value: true
    icon: "mdi:sine-wave"
    mode: slider
    optimistic: true

  # Maximum allowed fan speed regardless of simulation
  - platform: template
    name: "Fan Speed Limit"
    id: fan_speed_limit
    min_value: ${fan_speed_min}
    max_value: ${fan_speed_max}
    step: 5
    initial_value: ${fan_speed_default}
    unit_of_measurement: "%"
    restore_value: true
    icon: "mdi:speedometer-medium"
    mode: box
    optimistic: true

  # Minimum fan speed to prevent complete stops
  - platform: template
    name: "Minimum Fan Speed"
    id: minimum_fan_speed
    min_value: 0
    max_value: 50
    step: 5
    initial_value: 15
    unit_of_measurement: "%"
    restore_value: true
    icon: "mdi:speedometer-slow"
    mode: box
    optimistic: true

# Location-based wind simulation profiles
select:
  - platform: template
    name: "Wind Mode"
    id: wind_mode_select
    icon: "mdi:weather-partly-cloudy"
    options:
      - "Plage du Truc Vert"
      - "Capri"
      - "Plateau de Valensole"
      - "Fellhorn"
      - "Meseta de Somuncurá"
      - "Nærøyfjord"
      - "Manual"
    initial_option: "Plage du Truc Vert"
    restore_value: true
    optimistic: true
    on_value:
      - script.execute: handle_mode_change

# Human-readable wind condition description
text_sensor:
  - platform: template
    name: "Wind Condition"
    id: wind_condition_sensor
    icon: "mdi:weather-windy"
    update_interval: ${sensor_update_interval}

  - platform: template
    name: "Wind Activity State"
    id: wind_activity_state_sensor
    icon: "mdi:weather-windy-variant"
    update_interval: ${sensor_update_interval}
    lambda: |-
      if (id(current_activity_mode) == 0) return {"Quiet period"};
      else if (id(current_activity_mode) == 1) return {"Normal conditions"};
      else return {"Active period"};
      
  # ESP32 system information
  - platform: version
    name: "${friendly_name} ESPHome Version"
    
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
    ssid:
      name: "${friendly_name} WiFi SSID"
    mac_address:
      name: "${friendly_name} MAC Address"

# System status monitoring
binary_sensor:
  - platform: status
    name: "${friendly_name} Status"
    id: connection_status

  # Simulation state indicators
  - platform: template
    name: "${friendly_name} Wind Simulation Active"
    id: simulation_active_sensor
    icon: "mdi:weather-windy"
    lambda: |-
      return id(wind_simulation_active);

  # Fan operational status
  - platform: template
    name: "${friendly_name} Fan Running"
    id: fan_running_sensor
    icon: "mdi:fan"
    lambda: |-
      return id(desk_fan).state;

# ====================================================================================
# GLOBAL STATE VARIABLES
# ====================================================================================

globals:
  # Simulation control
  - id: wind_simulation_active
    type: bool
    restore_value: false
    initial_value: 'false'
  
  # Current wind parameters
  - id: base_wind_speed
    type: float
    restore_value: false
    initial_value: '5.0'
    
  - id: current_gust_multiplier
    type: float
    restore_value: false
    initial_value: '1.0'
    
  - id: wind_phase_offset
    type: float
    restore_value: false
    initial_value: '0.0'
    
  # Physics parameters
  - id: turbulence_factor
    type: float
    restore_value: false
    initial_value: '1.0'
    
  - id: gust_intensity_factor
    type: float
    restore_value: false
    initial_value: '1.0'
    
  - id: noise_time_scale
    type: float
    restore_value: false
    initial_value: '0.01'
    
  - id: perlin_seed_offset
    type: float
    restore_value: false
    initial_value: '0.0'

  # Dynamic timing intervals (milliseconds)
  - id: current_base_interval
    type: int
    restore_value: false
    initial_value: '800'
    
  - id: current_gust_interval
    type: int
    restore_value: false
    initial_value: '200'

  # Activity cycle management
  - id: current_activity_mode
    type: int
    restore_value: false
    initial_value: '1'  # 0=quiet, 1=normal, 2=active
    
  - id: activity_cycle_start_time
    type: float
    restore_value: false
    initial_value: '0.0'
    
  - id: activity_cycle_duration
    type: float
    restore_value: false
    initial_value: '60.0'  # Default 60 seconds
# ====================================================================================
# PHYSICS ENGINE & CORE ALGORITHMS
# ====================================================================================

script:
  # Optimized 1D Perlin noise implementation for natural wind patterns
  - id: perlin_noise_1d
    parameters:
      x: float
    then:
      - lambda: |-
          float i = floor(x);
          float f = x - i;
          
          // Pseudo-random gradient hash function
          auto hash = [](int n) -> float {
            n = (n << 13) ^ n;
            return (1.0f - ((n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0f);
          };
          
          // Calculate gradients at integer lattice points
          float g0 = hash((int)i);
          float g1 = hash((int)i + 1);
          
          // Smoothstep interpolation for C2 continuity
          float u = f * f * (3.0f - 2.0f * f);
          
          // Linear interpolation between gradients
          float noise_value = g0 * (1.0f - u) + g1 * u;
          
          // Store result in global variable for retrieval
          id(wind_phase_offset) = noise_value;

  # Fan speed application with safety limits and intensity scaling
  - id: apply_fan_speed
    parameters:
      speed_percent: float
    then:
      - lambda: |-
          float requested_speed = speed_percent / 100.0f;
          float speed_limit = id(fan_speed_limit).state / 100.0f;
          float intensity_multiplier = id(wind_intensity).state / 100.0f;
          float min_speed = id(minimum_fan_speed).state / 100.0f;
          
          // Apply global intensity modifier during simulation
          if (id(wind_simulation_active)) {
            requested_speed *= intensity_multiplier;
          }
          
          // Enforce maximum speed limit
          float final_speed = (requested_speed > speed_limit) ? speed_limit : requested_speed;
          
          // Enforce minimum speed to prevent stalling
          if (final_speed > 0 && final_speed < min_speed) {
            final_speed = min_speed;
          }
          
          // Apply PWM output or turn off if below threshold
          if (final_speed < 0.05f) {
            id(fan_pwm_output).turn_off();
          } else {
            id(fan_pwm_output).set_level(final_speed);
          }

  # Main wind physics calculation with multi-octave Perlin noise
  - id: calculate_wind_physics
    then:
      - lambda: |-
          if (!id(wind_simulation_active)) return;
          
          std::string mode = id(wind_mode_select).state;
          uint32_t now = millis();
          float t = now / 1000.0f;
          
          // Check if we need to transition activity modes
          if (t - id(activity_cycle_start_time) > id(activity_cycle_duration)) {
            // Time to change activity mode
            float random_val = (esp_random() % 100) / 100.0f;
            int old_mode = id(current_activity_mode);
            
            // Weighted probability for next state based on current state
            if (id(current_activity_mode) == 0) {        // Currently quiet
              if (random_val < 0.7f) id(current_activity_mode) = 1;      // 70% -> normal
              else id(current_activity_mode) = 2;                        // 30% -> active
            } else if (id(current_activity_mode) == 1) { // Currently normal
              if (random_val < 0.3f) id(current_activity_mode) = 0;      // 30% -> quiet
              else if (random_val < 0.8f) id(current_activity_mode) = 1; // 50% -> stay normal
              else id(current_activity_mode) = 2;                        // 20% -> active
            } else {                                     // Currently active
              if (random_val < 0.6f) id(current_activity_mode) = 1;      // 60% -> normal
              else id(current_activity_mode) = 0;                        // 40% -> quiet
            }
            
            // Set new cycle duration based on activity mode and location
            if (id(current_activity_mode) == 0) {       // Quiet periods
              id(activity_cycle_duration) = 45.0f + (esp_random() % 60); // 45-105 seconds
            } else if (id(current_activity_mode) == 1) { // Normal periods
              id(activity_cycle_duration) = 60.0f + (esp_random() % 90); // 60-150 seconds
            } else {                                     // Active periods
              id(activity_cycle_duration) = 30.0f + (esp_random() % 45); // 30-75 seconds
            }
            
            id(activity_cycle_start_time) = t;
            
            if (old_mode != id(current_activity_mode)) {
              ESP_LOGI("wind", "Activity transition: %d -> %d, duration: %.0fs", 
                       old_mode, id(current_activity_mode), id(activity_cycle_duration));
            }
          }
          
          // Default atmospheric parameters
          float base_speed = 8.0f;
          float breathing_period = 8.0f;
          float breathing_amplitude = 0.3f;
          float micro_turbulence = 0.15f;
          float gust_probability = 0.02f;
          float gust_duration = 3.0f;
          float gust_buildup_time = 1.5f;
          
          // Location-specific atmospheric modeling
          if (mode == "Plage du Truc Vert") {
              base_speed = 12.0f;
              breathing_period = 12.0f;
              breathing_amplitude = 0.4f;
              micro_turbulence = 0.2f;
              gust_probability = 0.03f;
              gust_duration = 4.0f;
              gust_buildup_time = 2.0f;
              id(noise_time_scale) = 0.008f;
              id(current_base_interval) = 1200;
              id(current_gust_interval) = 800;
          } else if (mode == "Capri") {
              base_speed = 6.5f;
              breathing_period = 15.0f;
              breathing_amplitude = 0.25f;
              micro_turbulence = 0.1f;
              gust_probability = 0.015f;
              gust_duration = 2.5f;
              gust_buildup_time = 1.0f;
              id(noise_time_scale) = 0.005f;
              id(current_base_interval) = 1800;
              id(current_gust_interval) = 1200;
          } else if (mode == "Plateau de Valensole") {
              base_speed = 3.5f;
              breathing_period = 20.0f;
              breathing_amplitude = 0.2f;
              micro_turbulence = 0.08f;
              gust_probability = 0.008f;
              gust_duration = 5.0f;
              gust_buildup_time = 3.0f;
              id(noise_time_scale) = 0.003f;
              id(current_base_interval) = 2500;
              id(current_gust_interval) = 2000;
          } else if (mode == "Fellhorn") {
              base_speed = 11.0f;
              breathing_period = 6.0f;
              breathing_amplitude = 0.6f;
              micro_turbulence = 0.3f;
              gust_probability = 0.05f;
              gust_duration = 2.0f;
              gust_buildup_time = 0.8f;
              id(noise_time_scale) = 0.012f;
              id(current_base_interval) = 900;
              id(current_gust_interval) = 400;
          } else if (mode == "Meseta de Somuncurá") {
              base_speed = 18.0f;
              breathing_period = 10.0f;
              breathing_amplitude = 0.5f;
              micro_turbulence = 0.25f;
              gust_probability = 0.08f;
              gust_duration = 6.0f;
              gust_buildup_time = 1.2f;
              id(noise_time_scale) = 0.015f;
              id(current_base_interval) = 800;
              id(current_gust_interval) = 300;
          } else if (mode == "Nærøyfjord") {
              base_speed = 14.0f;
              breathing_period = 8.0f;
              breathing_amplitude = 0.7f;
              micro_turbulence = 0.35f;
              gust_probability = 0.06f;
              gust_duration = 3.5f;
              gust_buildup_time = 1.0f;
              id(noise_time_scale) = 0.010f;
              id(current_base_interval) = 1000;
              id(current_gust_interval) = 500;
          }
          
          // ACTIVITY MODE MODIFICATIONS
          float activity_multiplier = 1.0f;
          float activity_turbulence_mod = 1.0f;
          float activity_gust_mod = 1.0f;
          
          if (id(current_activity_mode) == 0) {        // Quiet mode
              activity_multiplier = 0.6f;              // Reduce overall wind
              activity_turbulence_mod = 0.4f;          // Much less turbulence
              activity_gust_mod = 0.3f;                // Fewer gusts
              breathing_amplitude *= 0.5f;             // Gentler breathing
              
              // Location-specific quiet characteristics
              if (mode == "Plage du Truc Vert") {
                  // Ocean calm between wave sets
                  breathing_period *= 1.8f;            // Longer, slower breathing
              } else if (mode == "Capri") {
                  // Mediterranean stillness
                  activity_multiplier = 0.4f;          // Very calm
                  breathing_period *= 2.2f;
              } else if (mode == "Plateau de Valensole") {
                  // Morning/evening calm in lavender fields
                  activity_multiplier = 0.3f;          // Almost still
                  breathing_period *= 3.0f;
              } else if (mode == "Fellhorn") {
                  // Valley wind lull
                  activity_multiplier = 0.5f;
                  breathing_period *= 1.3f;
              } else if (mode == "Meseta de Somuncurá") {
                  // Even Patagonia has brief calm moments
                  activity_multiplier = 0.7f;          // Still substantial
              } else if (mode == "Nærøyfjord") {
                  // Fjord pressure equalization
                  activity_multiplier = 0.5f;
                  breathing_period *= 1.5f;
              }
              
          } else if (id(current_activity_mode) == 2) { // Active mode
              activity_multiplier = 1.4f;              // Increase overall wind
              activity_turbulence_mod = 1.8f;          // More turbulence
              activity_gust_mod = 2.5f;                // More frequent gusts
              breathing_amplitude *= 1.6f;             // More dramatic breathing
              
              // Location-specific active characteristics
              if (mode == "Plage du Truc Vert") {
                  // Ocean storm approach or strong onshore flow
                  activity_multiplier = 1.6f;
                  breathing_period *= 0.7f;            // Faster, more urgent
              } else if (mode == "Capri") {
                  // Thermal activity or sirocco influence
                  activity_multiplier = 1.5f;
                  activity_gust_mod = 3.0f;            // Thermal gusts
              } else if (mode == "Plateau de Valensole") {
                  // Afternoon thermal activity
                  activity_multiplier = 1.3f;
                  breathing_period *= 0.8f;
              } else if (mode == "Fellhorn") {
                  // Alpine storm or strong valley winds
                  activity_multiplier = 1.7f;
                  activity_gust_mod = 3.5f;            // Dramatic mountain gusts
                  breathing_period *= 0.6f;
              } else if (mode == "Meseta de Somuncurá") {
                  // Full Patagonian fury
                  activity_multiplier = 1.8f;
                  activity_gust_mod = 4.0f;
                  breathing_period *= 0.5f;
              } else if (mode == "Nærøyfjord") {
                  // Katabatic winds or pressure gradient
                  activity_multiplier = 1.6f;
                  activity_gust_mod = 3.2f;
                  breathing_period *= 0.7f;
              }
          }
          // Normal mode (id 1) uses base parameters unchanged
          
          // Apply activity modifications
          base_speed *= activity_multiplier;
          micro_turbulence *= activity_turbulence_mod;
          gust_probability *= activity_gust_mod;
          
          // Store modified parameters for gust calculation
          id(base_wind_speed) = base_speed;
          id(turbulence_factor) = activity_turbulence_mod;
          id(gust_intensity_factor) = activity_gust_mod;
          
          // BREATHING PATTERN with activity modification
          float breathing_phase = sin(t * 2.0f * M_PI / breathing_period);
          float breathing_modifier = 1.0f + breathing_amplitude * breathing_phase;
          
          // MICRO-TURBULENCE
          float turbulence_time = t * id(noise_time_scale) * 15.0f;
          id(perlin_noise_1d).execute(turbulence_time + id(perlin_seed_offset));
          float micro_turb = id(wind_phase_offset) * micro_turbulence;
          
          // COMBINE PATTERNS
          float current_wind_mph = base_speed * breathing_modifier * (1.0f + micro_turb);
          current_wind_mph = fmax(1.0f, fmin(25.0f, current_wind_mph));
          
          id(wind_speed_sensor).publish_state(current_wind_mph);
          
          // Convert to fan percentage
          float fan_speed_percent = 15.0f + (current_wind_mph - 1.0f) * (75.0f / 19.0f);
          fan_speed_percent = fmax(15, fmin(90, fan_speed_percent));
          fan_speed_percent *= id(current_gust_multiplier);
          
          id(apply_fan_speed).execute(fan_speed_percent);

  # Gust pattern generation using Perlin noise for natural randomness
  - id: calculate_gusts
    then:
      - lambda: |-
          if (!id(wind_simulation_active)) return;
          
          std::string mode = id(wind_mode_select).state;
          uint32_t now = millis();
          float t = now / 1000.0f;
          static float last_gust_time = 0;
          static float gust_target = 1.0f;
          static float gust_start_time = 0;
          static bool gust_active = false;
          
          // Get location-specific gust parameters
          float gust_probability = 0.02f;    // Base probability per cycle
          float gust_duration = 3.0f;
          float gust_buildup_time = 1.5f;
          float max_gust_strength = 1.8f;
          
          if (mode == "Plage du Truc Vert") {
              gust_probability = 0.03f;
              gust_duration = 4.0f;
              gust_buildup_time = 2.0f;
              max_gust_strength = 2.0f;
          } else if (mode == "Capri") {
              gust_probability = 0.015f;
              gust_duration = 2.5f;
              gust_buildup_time = 1.0f;
              max_gust_strength = 1.6f;
          } else if (mode == "Plateau de Valensole") {
              gust_probability = 0.008f;
              gust_duration = 5.0f;
              gust_buildup_time = 3.0f;
              max_gust_strength = 1.4f;
          } else if (mode == "Fellhorn") {
              gust_probability = 0.05f;
              gust_duration = 2.0f;
              gust_buildup_time = 0.8f;
              max_gust_strength = 2.3f;
          } else if (mode == "Meseta de Somuncurá") {
              gust_probability = 0.08f;
              gust_duration = 6.0f;
              gust_buildup_time = 1.2f;
              max_gust_strength = 2.5f;
          } else if (mode == "Nærøyfjord") {
              gust_probability = 0.06f;
              gust_duration = 3.5f;
              gust_buildup_time = 1.0f;
              max_gust_strength = 2.4f;
          }
          
          // Apply activity mode modifications
          gust_probability *= id(gust_intensity_factor);
          
          if (id(current_activity_mode) == 0) {        // Quiet mode
              gust_duration *= 1.5f;                   // Longer, gentler gusts
              gust_buildup_time *= 2.0f;               // Slower buildup
              max_gust_strength *= 0.7f;               // Weaker gusts
              
              // Location-specific quiet gust modifications
              if (mode == "Plage du Truc Vert") {
                  // Ocean calm - very gentle, rolling gusts
                  gust_duration *= 2.0f;               // Long, rolling ocean swells
                  max_gust_strength *= 0.6f;           // Very gentle
              } else if (mode == "Capri") {
                  // Mediterranean quiet - barely perceptible
                  gust_duration *= 3.0f;               // Very long, gentle movements
                  max_gust_strength *= 0.5f;           // Minimal strength
              } else if (mode == "Plateau de Valensole") {
                  // Lavender field calm - almost imperceptible
                  gust_duration *= 4.0f;               // Very slow movements
                  max_gust_strength *= 0.4f;           // Barely noticeable
              } else if (mode == "Fellhorn") {
                  // Mountain valley lull - still some character
                  gust_duration *= 1.2f;               // Slightly longer
                  max_gust_strength *= 0.8f;           // Still has some mountain character
              } else if (mode == "Meseta de Somuncurá") {
                  // Patagonian "calm" - still significant by other standards
                  gust_duration *= 1.3f;               
                  max_gust_strength *= 0.9f;           // Even quiet Patagonia has character
              } else if (mode == "Nærøyfjord") {
                  // Fjord pressure equalization - gradual changes
                  gust_duration *= 1.8f;               
                  max_gust_strength *= 0.7f;           
              }
              
          } else if (id(current_activity_mode) == 2) { // Active mode
              gust_duration *= 0.8f;                   // Shorter, sharper gusts
              gust_buildup_time *= 0.6f;               // Faster buildup
              max_gust_strength *= 1.3f;               // Stronger gusts
              
              // Location-specific active gust modifications
              if (mode == "Plage du Truc Vert") {
                  // Atlantic storm conditions - powerful, sustained
                  gust_duration *= 1.2f;               // Sustained ocean gusts
                  max_gust_strength *= 1.4f;           // Strong oceanic power
                  gust_buildup_time *= 0.8f;           // Builds like incoming waves
              } else if (mode == "Capri") {
                  // Mediterranean thermal activity - quick, sharp
                  gust_duration *= 0.7f;               // Quick thermal bursts
                  max_gust_strength *= 1.2f;           // Moderate intensity
                  gust_buildup_time *= 0.5f;           // Sudden thermal response
              } else if (mode == "Plateau de Valensole") {
                  // Afternoon thermal activity - gentle but noticeable
                  gust_duration *= 0.9f;               
                  max_gust_strength *= 1.1f;           // Still relatively gentle
                  gust_buildup_time *= 0.7f;           
              } else if (mode == "Fellhorn") {
                  // Alpine storm fury - dramatic and sudden
                  gust_duration *= 0.6f;               // Sharp mountain gusts
                  max_gust_strength *= 1.6f;           // Dramatic alpine power
                  gust_buildup_time *= 0.4f;           // Sudden mountain blasts
              } else if (mode == "Meseta de Somuncurá") {
                  // Full Patagonian fury - relentless and powerful
                  gust_duration *= 1.0f;               // Sustained power
                  max_gust_strength *= 1.8f;           // Maximum intensity
                  gust_buildup_time *= 0.5f;           // Quick, powerful surges
              } else if (mode == "Nærøyfjord") {
                  // Katabatic winds and pressure gradients - channeled power
                  gust_duration *= 0.8f;               // Sharp pressure changes
                  max_gust_strength *= 1.5f;           // Channeled fjord power
                  gust_buildup_time *= 0.6f;           // Sudden pressure shifts
              }
          }
          // Normal mode (id 1) uses base parameters unchanged
          
          // Apply user gust frequency preference
          float user_gust_freq = id(gust_frequency).state / 100.0f;
          gust_probability *= user_gust_freq;
          
          // Check if we should start a new gust
          if (!gust_active && (t - last_gust_time) > 2.0f) {  // Minimum 2s between gusts
              float random_val = (esp_random() % 1000) / 1000.0f;
              if (random_val < gust_probability) {
                  // Start new gust
                  gust_active = true;
                  gust_start_time = t;
                  gust_target = 1.0f + ((esp_random() % 100) / 100.0f) * (max_gust_strength - 1.0f);
                  last_gust_time = t;
                  
                  // Log with activity context
                  std::string activity_names[] = {"quiet", "normal", "active"};
                  ESP_LOGI("wind", "Starting %s gust: strength=%.2f, duration=%.1fs, buildup=%.1fs", 
                           activity_names[id(current_activity_mode)].c_str(), 
                           gust_target, gust_duration, gust_buildup_time);
              }
          }
          
          // Handle active gust
          if (gust_active) {
              float gust_age = t - gust_start_time;
              
              if (gust_age < gust_buildup_time) {
                  // Building up phase - smooth acceleration
                  float buildup_progress = gust_age / gust_buildup_time;
                  
                  // Different buildup curves based on activity mode
                  if (id(current_activity_mode) == 0) {        // Quiet - very gradual
                      // Gentle S-curve for smooth, natural buildup
                      buildup_progress = buildup_progress * buildup_progress * (3.0f - 2.0f * buildup_progress);
                  } else if (id(current_activity_mode) == 2) { // Active - sharp
                      // Exponential curve for sudden, dramatic buildup
                      buildup_progress = 1.0f - exp(-3.0f * buildup_progress);
                  } else {                                     // Normal - standard
                      // Cubic ease-out for natural feel
                      buildup_progress = 1.0f - pow(1.0f - buildup_progress, 3.0f);
                  }
                  
                  float current_target = 1.0f + (gust_target - 1.0f) * buildup_progress;
                  id(current_gust_multiplier) = current_target;
                  
              } else if (gust_age < gust_duration) {
                  // Sustain phase - hold near peak with slight variation
                  float sustain_time = gust_age - gust_buildup_time;
                  float sustain_variation = 0.0f;
                  
                  // Activity-dependent sustain patterns
                  if (id(current_activity_mode) == 0) {        // Quiet - very stable
                      sustain_variation = sin(sustain_time * 1.5f) * 0.05f;  // Minimal variation
                  } else if (id(current_activity_mode) == 2) { // Active - turbulent
                      // More complex variation with multiple frequencies
                      sustain_variation = sin(sustain_time * 4.0f) * 0.12f + 
                                        sin(sustain_time * 7.0f) * 0.08f;
                  } else {                                     // Normal - moderate
                      sustain_variation = sin(sustain_time * 3.0f) * 0.1f;  // Standard variation
                  }
                  
                  id(current_gust_multiplier) = gust_target + sustain_variation;
                  
              } else {
                  // Decay phase - return to baseline
                  float decay_time = gust_age - gust_duration;
                  float decay_factor = 0.0f;
                  
                  // Activity-dependent decay patterns
                  if (id(current_activity_mode) == 0) {        // Quiet - very gradual
                      decay_factor = exp(-decay_time * 1.0f);  // Slow, gentle decay
                  } else if (id(current_activity_mode) == 2) { // Active - quick drop
                      decay_factor = exp(-decay_time * 3.0f);  // Fast decay
                  } else {                                     // Normal - standard
                      decay_factor = exp(-decay_time * 2.0f);  // Standard decay
                  }
                  
                  id(current_gust_multiplier) = 1.0f + (gust_target - 1.0f) * decay_factor;
                  
                  // End gust when nearly back to baseline
                  if (id(current_gust_multiplier) < 1.05f) {
                      gust_active = false;
                      id(current_gust_multiplier) = 1.0f;
                      ESP_LOGI("wind", "Gust completed after %.1fs", gust_age);
                  }
              }
          } else {
              // No active gust - ensure we're at baseline
              id(current_gust_multiplier) = 1.0f;
          }
          
          // Update gust strength sensor
          float gust_percent = (id(current_gust_multiplier) - 1.0f) * 100.0f;
          id(gust_strength_sensor).publish_state(fmax(0, gust_percent));

  # Generate human-readable wind condition descriptions
  - id: update_wind_description
    then:
      - lambda: |-
          std::string mode = id(wind_mode_select).state;
          float wind_mph = id(wind_speed_sensor).state;
          float gust_strength = id(gust_strength_sensor).state;
          
          std::string description = "";
          
          // Beaufort scale classification
          if (wind_mph < 4) {
            description = "Calm";
          } else if (wind_mph < 8) {
            description = "Light breeze";
          } else if (wind_mph < 12) {
            description = "Gentle breeze";
          } else if (wind_mph < 18) {
            description = "Moderate breeze";
          } else {
            description = "Fresh breeze";
          }
          
          // Add activity state modifier
          if (id(current_activity_mode) == 0) {
            if (description != "Calm") description = "Quiet " + description;
          } else if (id(current_activity_mode) == 2) {
            description = "Active " + description;
          }

          // Add gust information
          if (gust_strength > 20) {
            description += " with gusts";
          } else if (gust_strength > 5) {
            description += " with light gusts";
          }
          
          // Add location context
          if (mode == "Plage du Truc Vert") {
            description += " (Atlantic)";
          } else if (mode == "Capri") {
            description += " (Mediterranean)";
          } else if (mode == "Plateau de Valensole") {
            description += " (country side)";
          } else if (mode == "Fellhorn") {
            description += " (Alpine)";
          } else if (mode == "Meseta de Somuncurá") {
            description += " (Patagonian)";
          } else if (mode == "Nærøyfjord") {
            description += " (fjord)";
          }
          
          id(wind_condition_sensor).publish_state(description);

# ====================================================================================
# SIMULATION CONTROL & MODE MANAGEMENT
# ====================================================================================

  # Handle wind mode changes with proper cleanup and initialization
  - id: handle_mode_change
    then:
      - lambda: |-
          std::string mode = id(wind_mode_select).state;
          ESP_LOGI("wind", "Wind mode changed to: %s", mode.c_str());
          
          // Stop existing simulation loops
          id(wind_physics_loop).stop();
          id(gust_calculation_loop).stop();
          id(wind_simulation_active) = false;
          
          // Reset wind state
          id(current_gust_multiplier) = 1.0f;
          id(gust_strength_sensor).publish_state(0);
          id(perlin_seed_offset) = (esp_random() % 1000) / 10.0f;
          
          // Reset intervals to defaults
          id(current_base_interval) = 800;
          id(current_gust_interval) = 200;
          
          ESP_LOGI("wind", "Generated new noise seed: %.1f", id(perlin_seed_offset));
      - delay: 300ms
      - if:
          condition:
            lambda: 'return id(wind_mode_select).state != "Manual";'
          then:
            - lambda: |-
                id(wind_simulation_active) = true;
                ESP_LOGI("wind", "Starting wind simulation with intervals: base=%dms, gust=%dms", 
                         id(current_base_interval), id(current_gust_interval));
            - script.execute: wind_physics_loop
            - script.execute: gust_calculation_loop
      - if:
          condition:
            lambda: 'return id(wind_mode_select).state == "Manual";'
          then:
            - output.turn_off: fan_pwm_output
            - lambda: 'ESP_LOGI("wind", "Manual mode activated");'

  # Main physics simulation loop with dynamic timing
  - id: wind_physics_loop
    mode: restart
    then:
      - logger.log: "Starting wind physics simulation"
      - while:
          condition:
            lambda: 'return id(wind_simulation_active);'
          then:
            - script.execute: calculate_wind_physics
            - script.execute: update_wind_description
            - delay: !lambda "return id(current_base_interval);"

  # Gust calculation loop running at higher frequency
  - id: gust_calculation_loop
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return id(wind_simulation_active);'
          then:
            - script.execute: calculate_gusts
            - delay: !lambda "return id(current_gust_interval);"

# ====================================================================================
# USER INTERACTION BUTTONS
# ====================================================================================

button:
  # Manual gust trigger for immediate effect
  - platform: template
    name: "Quick Gust"
    id: trigger_gust_button
    icon: "mdi:weather-windy"
    on_press:
      - if:
          condition:
            lambda: 'return id(wind_simulation_active);'
          then:
            - lambda: |-
                float gust_strength = 1.5f + ((esp_random() % 70) / 100.0f);
                id(current_gust_multiplier) = gust_strength;
                float gust_percent = (gust_strength - 1.0f) * 100.0f;
                id(gust_strength_sensor).publish_state(gust_percent);
                ESP_LOGI("wind", "Manual gust triggered: %.2f", gust_strength);

  # Force calm conditions temporarily
  - platform: template
    name: "Calm Wind"
    id: calm_wind_button
    icon: "mdi:weather-windy-variant"
    on_press:
      - if:
          condition:
            lambda: 'return id(wind_simulation_active);'
          then:
            - lambda: |-
                id(current_gust_multiplier) = 0.7f;
                id(gust_strength_sensor).publish_state(0);
                ESP_LOGI("wind", "Calm period triggered");

  # System diagnostics and restart
  - platform: restart
    name: "${friendly_name} Restart"
    id: restart_button

  # Reset wind simulation with new noise seed
  - platform: template
    name: "Regenerate Wind Pattern"
    id: regenerate_pattern_button
    icon: "mdi:refresh"
    on_press:
      - lambda: |-
          if (id(wind_simulation_active)) {
            // Generate new noise seed for pattern variation
            id(perlin_seed_offset) = (esp_random() % 1000) / 10.0f;
            ESP_LOGI("wind", "New wind pattern generated with seed: %.1f", id(perlin_seed_offset));
          }

# ====================================================================================
# SYSTEM MAINTENANCE & MONITORING
# ====================================================================================

interval:
  # Periodic system health checks and parameter validation
  - interval: 30s
    then:
      - lambda: |-
          if (id(wind_simulation_active)) {
            // Prevent gust multiplier from getting stuck in extreme values
            if (id(current_gust_multiplier) > 3.0f) {
              id(current_gust_multiplier) = 1.5f;
              ESP_LOGW("wind", "Gust multiplier clamped to safe maximum");
            }
            if (id(current_gust_multiplier) < 0.5f) {
              id(current_gust_multiplier) = 0.8f;
              ESP_LOGW("wind", "Gust multiplier clamped to safe minimum");
            }
          }
