substitutions:
  device_name: "wind-scape"
  friendly_name: "WindScape"
  
  # PWM Configuration
  pwm_frequency: "25000Hz"
  pwm_min_power: "0"
  
  # Fan operational limits
  fan_speed_min: "0"
  fan_speed_max: "100"
  fan_speed_default: "80"
  
  # Update intervals
  base_update_interval: "2000ms"
  gust_check_interval: "1000ms"
  sensor_update_interval: "1s"

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  comment: "PWM fan controller with wind simulation"

esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${friendly_name} Fallback"
    password: !secret ap_password

api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

logger:
  level: DEBUG
  logs:
    wind: DEBUG

# ====================================================================================
# HARDWARE CONFIGURATION
# ====================================================================================

output:
  - platform: ledc
    pin: GPIO14
    id: fan_pwm_output
    frequency: ${pwm_frequency}
    min_power: ${pwm_min_power}

fan:
  - platform: speed
    name: "Manual Control"
    id: desk_fan
    output: fan_pwm_output
    speed_count: 100
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:fan"
    on_speed_set:
      - logger.log:
          format: "Manual fan control used, speed set to: %.0f%%"
          args: ['x']
      - if:
          condition:
            lambda: 'return id(wind_mode_select).state != "Manual";'
          then:
            - logger.log: "Auto-switching to Manual mode due to user interaction"
            - select.set:
                id: wind_mode_select
                option: "Manual"
      - script.execute:
          id: apply_fan_speed
          speed_percent: !lambda "return x;"

# ====================================================================================
# SENSORS & MONITORING
# ====================================================================================

sensor:
  # Fan RPM monitoring
  - platform: pulse_counter
    pin:
      number: GPIO27
      mode:
        input: true
        pullup: true
    name: "Fan RPM"
    id: fan_rpm
    update_interval: 2s
    unit_of_measurement: "RPM"
    icon: "mdi:speedometer"
    accuracy_decimals: 0
    filters:
      - multiply: 0.5

  # Current simulated wind speed
  - platform: template
    name: "Wind Speed"
    id: wind_speed_sensor
    unit_of_measurement: "mph"
    icon: "mdi:weather-windy"
    accuracy_decimals: 1
    state_class: "measurement"
    update_interval: ${sensor_update_interval}

  # Current gust status
  - platform: template
    name: "Gust Active"
    id: gust_active_sensor
    unit_of_measurement: "%"
    icon: "mdi:weather-windy-variant"
    accuracy_decimals: 0
    state_class: "measurement"
    update_interval: ${sensor_update_interval}

  # System diagnostics
  - platform: uptime
    name: "${friendly_name} Uptime"
    update_interval: 60s

  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 60s

  - platform: internal_temperature
    name: "${friendly_name} CPU Temperature"
    update_interval: 30s

  - platform: template
    name: "${friendly_name} Free Heap"
    unit_of_measurement: "bytes"
    icon: "mdi:memory"
    accuracy_decimals: 0
    state_class: "measurement"
    update_interval: 30s
    lambda: |-
      return ESP.getFreeHeap();

# ====================================================================================
# USER CONTROLS
# ====================================================================================

number:
  # Global wind intensity multiplier
  - platform: template
    name: "Wind Intensity"
    id: wind_intensity
    min_value: 30
    max_value: 150
    step: 5
    initial_value: 100
    unit_of_measurement: "%"
    restore_value: true
    icon: "mdi:weather-windy-variant"
    mode: slider
    optimistic: true

  # How often gusts occur
  - platform: template
    name: "Gust Frequency"
    id: gust_frequency
    min_value: 10
    max_value: 90
    step: 5
    initial_value: 30
    unit_of_measurement: "%"
    restore_value: true
    icon: "mdi:sine-wave"
    mode: slider
    optimistic: true

  # Wind variation amount
  - platform: template
    name: "Wind Variability"
    id: wind_variability
    min_value: 0
    max_value: 100
    step: 5
    initial_value: 40
    unit_of_measurement: "%"
    restore_value: true
    icon: "mdi:wave"
    mode: slider
    optimistic: true

  # Minimum fan speed
  - platform: template
    name: "Minimum Fan Speed"
    id: minimum_fan_speed
    min_value: ${fan_speed_min}
    max_value: 50
    step: 5
    initial_value: 0
    unit_of_measurement: "%"
    restore_value: true
    icon: "mdi:speedometer-slow"
    mode: slider
    optimistic: true

  # Maximum fan speed
  - platform: template
    name: "Maximum Fan Speed"
    id: fan_speed_limit
    min_value: 40
    max_value: ${fan_speed_max}
    step: 5
    initial_value: ${fan_speed_default}
    unit_of_measurement: "%"
    restore_value: true
    icon: "mdi:speedometer-medium"
    mode: slider
    optimistic: true

# Wind environment presets
select:
  - platform: template
    name: "Wind Mode"
    id: wind_mode_select
    icon: "mdi:weather-partly-cloudy"
    options:
      - "Ocean"
      - "Mediterranean" 
      - "Countryside"
      - "Mountains"
      - "Plains"
      - "Fjord"
      - "Manual"
    initial_option: "Ocean"
    restore_value: true
    optimistic: true
    on_value:
      - script.execute: handle_mode_change

# Wind status displays
text_sensor:
  - platform: template
    name: "Wind Condition"
    id: wind_condition_sensor
    icon: "mdi:weather-windy"
    update_interval: ${sensor_update_interval}

  - platform: template
    name: "Current Wind State"
    id: wind_state_sensor
    icon: "mdi:information-outline"
    update_interval: 5s

  - platform: template
    name: "Current Weather Phase"
    id: weather_phase_sensor
    icon: "mdi:weather-partly-cloudy"
    update_interval: 5s
    lambda: |-
      if (id(current_weather_phase) == 0) return {"Quiet Air"};
      else if (id(current_weather_phase) == 1) return {"Medium Conditions"};
      else return {"High Activity"};

# System status
binary_sensor:
  - platform: status
    name: "${friendly_name} Status"

  - platform: template
    name: "${friendly_name} Wind Simulation Active"
    id: simulation_active_sensor
    icon: "mdi:weather-windy"
    lambda: |-
      return id(wind_simulation_active);

# ====================================================================================
# SIMULATION STATE VARIABLES
# ====================================================================================

globals:
  # Simulation control
  - id: wind_simulation_active
    type: bool
    restore_value: false
    initial_value: 'false'
  
  # Current wind state
  - id: current_wind_speed
    type: float
    restore_value: false
    initial_value: '8.0'
    
  - id: target_wind_speed
    type: float
    restore_value: false
    initial_value: '8.0'
    
  - id: wind_change_rate
    type: float
    restore_value: false
    initial_value: '0.1'
    
  # Gust state
  - id: gust_active
    type: bool
    restore_value: false
    initial_value: 'false'
    
  - id: gust_start_time
    type: float
    restore_value: false
    initial_value: '0.0'
    
  - id: gust_duration
    type: float
    restore_value: false
    initial_value: '3.0'
    
  - id: gust_intensity
    type: float
    restore_value: false
    initial_value: '1.0'
    
  - id: last_gust_check
    type: float
    restore_value: false
    initial_value: '0.0'
    
  # Wind behavior parameters set by location and phase
  - id: base_wind_min
    type: float
    restore_value: false
    initial_value: '5.0'
    
  - id: base_wind_max
    type: float
    restore_value: false
    initial_value: '15.0'
    
  - id: gust_probability_base
    type: float
    restore_value: false
    initial_value: '0.02'
    
  - id: location_gust_strength
    type: float
    restore_value: false
    initial_value: '1.8'
    
  # Weather phase system (3 phases: quiet, medium, high activity)
  - id: current_weather_phase
    type: int
    restore_value: false
    initial_value: '1'
    
  - id: phase_start_time
    type: float
    restore_value: false
    initial_value: '0.0'
    
  - id: phase_duration
    type: float
    restore_value: false
    initial_value: '60.0'
    
  - id: phase_wind_min
    type: float
    restore_value: false
    initial_value: '5.0'
    
  - id: phase_wind_max
    type: float
    restore_value: false
    initial_value: '15.0'

# ====================================================================================
# WIND SIMULATION ALGORITHMS
# ====================================================================================

script:
  # Apply fan speed with safety limits and intensity scaling
  - id: apply_fan_speed
    parameters:
      speed_percent: float
    then:
      - lambda: |-
          float requested_speed = speed_percent / 100.0f;
          float speed_limit = id(fan_speed_limit).state / 100.0f;
          float min_speed = id(minimum_fan_speed).state / 100.0f;
          float intensity_multiplier = id(wind_intensity).state / 100.0f;
          
          // Apply global intensity modifier during simulation
          if (id(wind_simulation_active)) {
            requested_speed *= intensity_multiplier;
          }
          
          // Enforce speed limits
          requested_speed = fmax(min_speed, fmin(speed_limit, requested_speed));
          
          if (requested_speed <= 0.01f) {
            id(fan_pwm_output).turn_off();
          } else {
            id(fan_pwm_output).set_level(requested_speed);
          }

  # Generate new random wind target speed
  - id: generate_wind_target
    then:
      - lambda: |-
          if (!id(wind_simulation_active)) return;
          
          // Use phase-specific wind range
          float range = id(phase_wind_max) - id(phase_wind_min);
          float random_factor = (esp_random() % 1000) / 1000.0f;
          float new_target = id(phase_wind_min) + (random_factor * range);
          
          // Add bias toward moderate values within the phase range
          float bias_factor = (esp_random() % 1000) / 1000.0f;
          new_target = (new_target + (id(phase_wind_min) + id(phase_wind_max)) * 0.5f * bias_factor) / (1.0f + bias_factor);
          
          id(target_wind_speed) = new_target;
          
          // Set change rate based on current phase
          float variability = id(wind_variability).state / 100.0f;
          float base_rate;
          
          if (id(current_weather_phase) == 0) {
            base_rate = 0.08f + (variability * 0.12f);
          } else if (id(current_weather_phase) == 2) {
            base_rate = 0.25f + (variability * 0.35f);
          } else {
            base_rate = 0.15f + (variability * 0.25f);
          }
          
          float rate_variation = (esp_random() % 100) / 100.0f;
          id(wind_change_rate) = base_rate * (0.7f + rate_variation);
          
          ESP_LOGD("wind", "Phase %d target: %.1f mph, rate: %.3f", 
                   id(current_weather_phase), id(target_wind_speed), id(wind_change_rate));

  # Weather phase management with transition logic
  - id: update_weather_phase
    then:
      - lambda: |-
          if (!id(wind_simulation_active)) return;
          
          float current_time = millis() / 1000.0f;
          
          // Check if current phase should end
          if (current_time - id(phase_start_time) >= id(phase_duration)) {
            int old_phase = id(current_weather_phase);
            float random_val = (esp_random() % 100) / 100.0f;
            
            // Phase transition probabilities
            if (id(current_weather_phase) == 0) {        // Currently quiet
              if (random_val < 0.6f) {
                id(current_weather_phase) = 1;           // 60% -> medium
              } else {
                id(current_weather_phase) = 2;           // 40% -> high
              }
            } else if (id(current_weather_phase) == 1) { // Currently medium
              if (random_val < 0.3f) {
                id(current_weather_phase) = 0;           // 30% -> quiet
              } else if (random_val < 0.7f) {
                id(current_weather_phase) = 1;           // 40% -> stay medium
              } else {
                id(current_weather_phase) = 2;           // 30% -> high
              }
            } else {                                     // Currently high
              if (random_val < 0.4f) {
                id(current_weather_phase) = 1;           // 40% -> medium
              } else if (random_val < 0.7f) {
                id(current_weather_phase) = 0;           // 30% -> quiet
              } else {
                id(current_weather_phase) = 2;           // 30% -> stay high
              }
            }
            
            // Set phase duration
            if (id(current_weather_phase) == 0) {
              id(phase_duration) = 90.0f + (esp_random() % 120);
            } else if (id(current_weather_phase) == 1) {
              id(phase_duration) = 120.0f + (esp_random() % 180);
            } else {
              id(phase_duration) = 60.0f + (esp_random() % 90);
            }
            
            id(phase_start_time) = current_time;
            
            // Update phase-specific wind ranges
            if (id(current_weather_phase) == 0) {
              id(phase_wind_min) = id(base_wind_min) * 0.3f;
              id(phase_wind_max) = id(base_wind_min) + (id(base_wind_max) - id(base_wind_min)) * 0.4f;
            } else if (id(current_weather_phase) == 1) {
              id(phase_wind_min) = id(base_wind_min) * 0.7f;
              id(phase_wind_max) = id(base_wind_min) + (id(base_wind_max) - id(base_wind_min)) * 0.8f;
            } else {
              id(phase_wind_min) = id(base_wind_min) + (id(base_wind_max) - id(base_wind_min)) * 0.4f;
              id(phase_wind_max) = id(base_wind_max) * 1.2f;
            }
            
            // Clamp ranges to reasonable limits
            id(phase_wind_min) = fmax(1.0f, id(phase_wind_min));
            id(phase_wind_max) = fmin(25.0f, id(phase_wind_max));
            
            ESP_LOGI("wind", "Phase change %d->%d: range %.1f-%.1f mph, duration %.0fs", 
                     old_phase, id(current_weather_phase), 
                     id(phase_wind_min), id(phase_wind_max), id(phase_duration));
            
            id(generate_wind_target).execute();
          }

  # Main wind simulation with smooth transitions
  - id: calculate_wind_simulation
    then:
      - lambda: |-
          if (!id(wind_simulation_active)) return;
          
          id(update_weather_phase).execute();
          
          float current_time = millis() / 1000.0f;
          
          // Move current wind toward target
          float target = id(target_wind_speed);
          float current = id(current_wind_speed);
          float change_rate = id(wind_change_rate);
          
          float difference = target - current;
          float change = difference * change_rate;
          
          // Phase-specific turbulence
          float turb_intensity;
          if (id(current_weather_phase) == 0) {
            turb_intensity = 0.2f;
          } else if (id(current_weather_phase) == 2) {
            turb_intensity = 1.2f;
          } else {
            turb_intensity = 0.6f;
          }
          
          float micro_turb = ((esp_random() % 200) - 100) / 100.0f * turb_intensity;
          
          id(current_wind_speed) = current + change + micro_turb;
          id(current_wind_speed) = fmax(1.0f, fmin(25.0f, id(current_wind_speed)));
          
          // Phase-specific target change behavior
          float change_threshold = 2.0f;
          float close_change_chance = 40.0f;
          float far_change_chance = 10.0f;
          
          if (id(current_weather_phase) == 0) {
            close_change_chance = 25.0f;
            far_change_chance = 5.0f;
            change_threshold = 1.5f;
          } else if (id(current_weather_phase) == 2) {
            close_change_chance = 60.0f;
            far_change_chance = 20.0f;
            change_threshold = 3.0f;
          }
          
          if (abs(difference) < change_threshold) {
            if ((esp_random() % 100) < close_change_chance) {
              id(generate_wind_target).execute();
            }
          } else {
            if ((esp_random() % 100) < far_change_chance) {
              id(generate_wind_target).execute();
            }
          }
          
          // Apply gust multiplier if active
          float final_wind = id(current_wind_speed);
          if (id(gust_active)) {
            final_wind *= id(gust_intensity);
          }
          
          id(wind_speed_sensor).publish_state(final_wind);
          
          // Convert to fan percentage (15% to 85% range)
          float fan_percent = 15.0f + ((final_wind - 1.0f) / 24.0f) * 70.0f;
          fan_percent = fmax(15.0f, fmin(85.0f, fan_percent));
          
          id(apply_fan_speed).execute(fan_percent);

  # Gust simulation system
  - id: check_for_gusts
    then:
      - lambda: |-
          if (!id(wind_simulation_active)) return;
          
          float current_time = millis() / 1000.0f;
          
          // If gust is active, update or end it
          if (id(gust_active)) {
            float gust_age = current_time - id(gust_start_time);
            
            if (gust_age >= id(gust_duration)) {
              id(gust_active) = false;
              id(gust_intensity) = 1.0f;
              id(gust_active_sensor).publish_state(0);
              ESP_LOGI("wind", "Gust ended after %.1f seconds", gust_age);
            } else {
              // Update gust intensity with envelope curve
              float progress = gust_age / id(gust_duration);
              float envelope;
              
              if (progress < 0.3f) {
                // Quick build-up
                envelope = progress / 0.3f;
                envelope = 1.0f - pow(1.0f - envelope, 2.0f);
              } else if (progress < 0.7f) {
                // Sustain with variation
                envelope = 1.0f;
                float variation = sin(gust_age * 2.0f) * 0.1f * ((esp_random() % 100) / 100.0f);
                envelope += variation;
              } else {
                // Decay
                float decay_progress = (progress - 0.7f) / 0.3f;
                envelope = 1.0f - (decay_progress * decay_progress);
              }
              
              id(gust_intensity) = 1.0f + (id(location_gust_strength) - 1.0f) * envelope;
              id(gust_active_sensor).publish_state(envelope * 100.0f);
            }
            return;
          }
          
          // Rate limit gust checks
          if (current_time - id(last_gust_check) < 1.5f) return;
          id(last_gust_check) = current_time;
          
          // Phase-specific gust probability
          float base_prob = id(gust_probability_base);
          float user_freq = id(gust_frequency).state / 100.0f;
          float phase_multiplier;
          
          if (id(current_weather_phase) == 0) {
            phase_multiplier = 0.4f;
          } else if (id(current_weather_phase) == 2) {
            phase_multiplier = 2.5f;
          } else {
            phase_multiplier = 1.0f;
          }
          
          float final_prob = base_prob * user_freq * phase_multiplier;
          float random_val = (esp_random() % 10000) / 10000.0f;
          
          if (random_val < final_prob) {
            id(gust_active) = true;
            id(gust_start_time) = current_time;
            
            // Phase-specific gust characteristics
            float duration_base, intensity_base;
            
            if (id(current_weather_phase) == 0) {
              duration_base = 2.0f + ((esp_random() % 100) / 100.0f) * 4.0f;
              intensity_base = 1.1f + ((esp_random() % 100) / 100.0f) * 0.4f;
            } else if (id(current_weather_phase) == 2) {
              duration_base = 1.0f + ((esp_random() % 100) / 100.0f) * 3.0f;
              intensity_base = 1.4f + ((esp_random() % 100) / 100.0f) * 1.0f;
            } else {
              duration_base = 1.5f + ((esp_random() % 100) / 100.0f) * 5.0f;
              intensity_base = 1.2f + ((esp_random() % 100) / 100.0f) * 0.6f;
            }
            
            id(gust_duration) = duration_base;
            id(gust_intensity) = fmin(intensity_base, id(location_gust_strength));
            
            std::string phase_names[] = {"quiet", "medium", "high"};
            ESP_LOGI("wind", "Starting %s phase gust: duration=%.1fs, max_intensity=%.2fx", 
                     phase_names[id(current_weather_phase)].c_str(),
                     id(gust_duration), id(gust_intensity));
          }

  # Generate wind description based on Beaufort scale
  - id: update_wind_description
    then:
      - lambda: |-
          float wind_mph = id(wind_speed_sensor).state;
          bool gust_is_active = id(gust_active);
          
          std::string description = "";
          std::string state_info = "";
          
          // Beaufort scale mapping
          if (wind_mph < 4) {
            description = "Calm";
          } else if (wind_mph < 8) {
            description = "Light breeze";
          } else if (wind_mph < 12) {
            description = "Gentle breeze";
          } else if (wind_mph < 18) {
            description = "Moderate breeze";
          } else {
            description = "Fresh breeze";
          }
          
          // Add phase context
          if (id(current_weather_phase) == 0) {
            description = "Quiet " + description;
          } else if (id(current_weather_phase) == 2) {
            description = "Active " + description;
          }
          
          if (gust_is_active) {
            description += " with gusts";
            state_info = "Gust active";
          } else {
            float target_diff = abs(id(target_wind_speed) - id(current_wind_speed));
            if (target_diff > 2.0f) {
              if (id(target_wind_speed) > id(current_wind_speed)) {
                state_info = "Wind building";
              } else {
                state_info = "Wind calming";
              }
            } else {
              // Show phase time remaining
              float phase_elapsed = (millis() / 1000.0f) - id(phase_start_time);
              float phase_remaining = id(phase_duration) - phase_elapsed;
              if (phase_remaining > 60) {
                state_info = "Phase: " + std::to_string((int)(phase_remaining / 60)) + "m remaining";
              } else {
                state_info = "Phase: " + std::to_string((int)phase_remaining) + "s remaining";
              }
            }
          }
          
          // Add location context
          std::string mode = id(wind_mode_select).state;
          if (mode != "Manual") {
            description += " (" + mode + ")";
          }
          
          id(wind_condition_sensor).publish_state(description);
          id(wind_state_sensor).publish_state(state_info);

# ====================================================================================
# SIMULATION CONTROL & MODE MANAGEMENT
# ====================================================================================

  # Handle wind mode changes and set location parameters
  - id: handle_mode_change
    then:
      - lambda: |-
          std::string mode = id(wind_mode_select).state;
          ESP_LOGI("wind", "Wind mode changed to: %s", mode.c_str());
          
          // Stop simulation
          id(wind_simulation_loop).stop();
          id(gust_check_loop).stop();
          id(wind_simulation_active) = false;
          
          // Reset gust state
          id(gust_active) = false;
          id(gust_intensity) = 1.0f;
          id(gust_active_sensor).publish_state(0);
          
      - delay: 300ms
      - lambda: |-
          std::string mode = id(wind_mode_select).state;
          
          if (mode != "Manual") {
            // Set location-specific parameters
            if (mode == "Ocean") {
              id(base_wind_min) = 8.0f;
              id(base_wind_max) = 16.0f;
              id(gust_probability_base) = 0.03f;
              id(location_gust_strength) = 2.0f;
            } else if (mode == "Mediterranean") {
              id(base_wind_min) = 4.0f;
              id(base_wind_max) = 10.0f;
              id(gust_probability_base) = 0.015f;
              id(location_gust_strength) = 1.6f;
            } else if (mode == "Countryside") {
              id(base_wind_min) = 2.0f;
              id(base_wind_max) = 8.0f;
              id(gust_probability_base) = 0.008f;
              id(location_gust_strength) = 1.4f;
            } else if (mode == "Mountains") {
              id(base_wind_min) = 6.0f;
              id(base_wind_max) = 18.0f;
              id(gust_probability_base) = 0.05f;
              id(location_gust_strength) = 2.3f;
            } else if (mode == "Plains") {
              id(base_wind_min) = 10.0f;
              id(base_wind_max) = 22.0f;
              id(gust_probability_base) = 0.08f;
              id(location_gust_strength) = 2.5f;
            } else if (mode == "Fjord") {
              id(base_wind_min) = 8.0f;
              id(base_wind_max) = 20.0f;
              id(gust_probability_base) = 0.06f;
              id(location_gust_strength) = 2.4f;
            }
            
            // Initialize wind state
            float mid_range = (id(base_wind_min) + id(base_wind_max)) * 0.5f;
            id(current_wind_speed) = mid_range;
            id(target_wind_speed) = mid_range;
            
            // Initialize phase system
            id(current_weather_phase) = 1;
            id(phase_start_time) = millis() / 1000.0f;
            id(phase_duration) = 120.0f;
            
            // Set initial phase ranges (medium)
            id(phase_wind_min) = id(base_wind_min) * 0.7f;
            id(phase_wind_max) = id(base_wind_min) + (id(base_wind_max) - id(base_wind_min)) * 0.8f;
            
            // Start simulation
            id(wind_simulation_active) = true;
            id(generate_wind_target).execute();
            id(wind_simulation_loop).execute();
            id(gust_check_loop).execute();
            
            ESP_LOGI("wind", "Started %s simulation: base range %.1f-%.1f mph, starting medium phase", 
                     mode.c_str(), id(base_wind_min), id(base_wind_max));
          } else {
            id(fan_pwm_output).turn_off();
            ESP_LOGI("wind", "Manual mode activated");
          }

  # Main simulation loop
  - id: wind_simulation_loop
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return id(wind_simulation_active);'
          then:
            - script.execute: calculate_wind_simulation
            - script.execute: update_wind_description
            - delay: !lambda 'return 200 + (esp_random() % 300);' # 200-500ms random

  # Gust check loop
  - id: gust_check_loop
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return id(wind_simulation_active);'
          then:
            - script.execute: check_for_gusts
            - delay: !lambda 'return 200 + (esp_random() % 600);' # 200-800ms random

# ====================================================================================
# USER INTERFACE
# ====================================================================================

button:
  - platform: restart
    name: "${friendly_name} Restart"

# ====================================================================================
# SYSTEM MAINTENANCE
# ====================================================================================

interval:
  # Periodic system nudges to prevent stagnation
  - interval: 30s
    then:
      - lambda: |-
          if (id(wind_simulation_active)) {
            // 20% chance to nudge the system if it seems stuck
            float target_diff = abs(id(target_wind_speed) - id(current_wind_speed));
            if (target_diff < 0.5f && (esp_random() % 100) < 20) {
              id(generate_wind_target).execute();
              ESP_LOGD("wind", "Maintenance wind nudge");
            }
          }
